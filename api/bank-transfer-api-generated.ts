/* tslint:disable */
/* eslint-disable */
/*
Developer API

At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BankTransferApi - axios parameter creator
 * @export
 */
export const BankTransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve a Bank Transfer
         * @param {string} bankTransferId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankTransfer: async (bankTransferId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferId' is not null or undefined
            assertParamExists('getBankTransfer', 'bankTransferId', bankTransferId)
            const localVarPath = `/bank-transfer-payments/{bankTransferId}`
                .replace(`{${"bankTransferId"}}`, encodeURIComponent(String(bankTransferId !== undefined ? bankTransferId : `-bankTransferId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bank-transfer-payments/{bankTransferId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Bank Transfers
         * @param {string} [limit] A limit on the number of objects to be returned, between 1 and 50.
         * @param {string} [before] A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list.
         * @param {string} [after] A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBankTransfers: async (limit?: string, before?: string, after?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bank-transfer-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bank-transfer-payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankTransferApi - functional programming interface
 * @export
 */
export const BankTransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankTransferApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve a Bank Transfer
         * @param {BankTransferApiGetBankTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankTransfer(requestParameters: BankTransferApiGetBankTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankTransfer(requestParameters.bankTransferId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Bank Transfers
         * @param {BankTransferApiListAllBankTransfersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllBankTransfers(requestParameters: BankTransferApiListAllBankTransfersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllBankTransfers(requestParameters.limit, requestParameters.before, requestParameters.after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankTransferApi - factory interface
 * @export
 */
export const BankTransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankTransferApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve a Bank Transfer
         * @param {BankTransferApiGetBankTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankTransfer(requestParameters: BankTransferApiGetBankTransferRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBankTransfer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Bank Transfers
         * @param {BankTransferApiListAllBankTransfersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBankTransfers(requestParameters: BankTransferApiListAllBankTransfersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listAllBankTransfers(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBankTransfer operation in BankTransferApi.
 * @export
 * @interface BankTransferApiGetBankTransferRequest
 */
export type BankTransferApiGetBankTransferRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BankTransferApiGetBankTransfer
    */
    readonly bankTransferId: string
    
}

/**
 * Request parameters for listAllBankTransfers operation in BankTransferApi.
 * @export
 * @interface BankTransferApiListAllBankTransfersRequest
 */
export type BankTransferApiListAllBankTransfersRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 50.
    * @type {string}
    * @memberof BankTransferApiListAllBankTransfers
    */
    readonly limit?: string
    
    /**
    * A cursor for use in pagination. ```before``` is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with ```obj_bar```, your subsequent call can include ```before=obj_bar``` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof BankTransferApiListAllBankTransfers
    */
    readonly before?: string
    
    /**
    * A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    * @type {string}
    * @memberof BankTransferApiListAllBankTransfers
    */
    readonly after?: string
    
}

/**
 * BankTransferApiGenerated - object-oriented interface
 * @export
 * @class BankTransferApiGenerated
 * @extends {BaseAPI}
 */
export class BankTransferApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Retrieve a Bank Transfer
     * @param {BankTransferApiGetBankTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransferApiGenerated
     */
    public getBankTransfer(requestParameters: BankTransferApiGetBankTransferRequest, options?: AxiosRequestConfig) {
        return BankTransferApiFp(this.configuration).getBankTransfer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Bank Transfers
     * @param {BankTransferApiListAllBankTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransferApiGenerated
     */
    public listAllBankTransfers(requestParameters: BankTransferApiListAllBankTransfersRequest = {}, options?: AxiosRequestConfig) {
        return BankTransferApiFp(this.configuration).listAllBankTransfers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
