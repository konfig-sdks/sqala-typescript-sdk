/* tslint:disable */
/* eslint-disable */
/*
Developer API

At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestMetadataInner } from '../models';
// @ts-ignore
import { RecipientCreateBankAccountRequest } from '../models';
// @ts-ignore
import { RecipientCreateBankAccountResponse } from '../models';
// @ts-ignore
import { RecipientCreateRecipientRequest } from '../models';
// @ts-ignore
import { RecipientCreateWithdrawalRequest } from '../models';
// @ts-ignore
import { RecipientCreateWithdrawalRequestBankAccount } from '../models';
// @ts-ignore
import { RecipientCreateWithdrawalResponse } from '../models';
// @ts-ignore
import { RecipientDeleteBankAccountResponse } from '../models';
// @ts-ignore
import { RecipientGetBankAccountResponse } from '../models';
// @ts-ignore
import { RecipientGetWithdrawalByIdResponse } from '../models';
// @ts-ignore
import { RecipientListAllResponse } from '../models';
// @ts-ignore
import { RecipientListBankAccountsResponse } from '../models';
// @ts-ignore
import { RecipientListWithdrawalsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RecipientApi - axios parameter creator
 * @export
 */
export const RecipientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Bank Account
         * @param {string} recipientId 
         * @param {RecipientCreateBankAccountRequest} [recipientCreateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount: async (recipientId: string, recipientCreateBankAccountRequest?: RecipientCreateBankAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('createBankAccount', 'recipientId', recipientId)
            const localVarPath = `/recipients/{recipientId}/bank-accounts`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recipientCreateBankAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/bank-accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recipientCreateBankAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a Recipient
         * @param {RecipientCreateRecipientRequest} [recipientCreateRecipientRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipient: async (recipientCreateRecipientRequest?: RecipientCreateRecipientRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recipientCreateRecipientRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recipientCreateRecipientRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a Withdrawal
         * @param {string} recipientId 
         * @param {RecipientCreateWithdrawalRequest} [recipientCreateWithdrawalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWithdrawal: async (recipientId: string, recipientCreateWithdrawalRequest?: RecipientCreateWithdrawalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('createWithdrawal', 'recipientId', recipientId)
            const localVarPath = `/recipients/{recipientId}/withdrawals`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recipientCreateWithdrawalRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/withdrawals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recipientCreateWithdrawalRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Bank Account
         * @param {string} recipientId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccount: async (recipientId: string, bankAccountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('deleteBankAccount', 'recipientId', recipientId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('deleteBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/recipients/{recipientId}/bank-accounts/{bankAccountId}`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId !== undefined ? bankAccountId : `-bankAccountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/bank-accounts/{bankAccountId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Balance
         * @param {string} recipientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance: async (recipientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('getBalance', 'recipientId', recipientId)
            const localVarPath = `/recipients/{recipientId}/balance`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/balance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Bank Account
         * @param {string} recipientId 
         * @param {string} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: async (recipientId: string, bankAccountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('getBankAccount', 'recipientId', recipientId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('getBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/recipients/{recipientId}/bank-accounts/{bankAccountId}`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId !== undefined ? bankAccountId : `-bankAccountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/bank-accounts/{bankAccountId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Recipient
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/recipients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Withdrawal
         * @param {string} recipientId 
         * @param {string} withdrawalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithdrawalById: async (recipientId: string, withdrawalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('getWithdrawalById', 'recipientId', recipientId)
            // verify required parameter 'withdrawalId' is not null or undefined
            assertParamExists('getWithdrawalById', 'withdrawalId', withdrawalId)
            const localVarPath = `/recipients/{recipientId}/withdrawals/{withdrawalId}`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)))
                .replace(`{${"withdrawalId"}}`, encodeURIComponent(String(withdrawalId !== undefined ? withdrawalId : `-withdrawalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/withdrawals/{withdrawalId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Recipients
         * @param {number} [limit] A limit on the number of objects to be returned, between 1 and 50.
         * @param {string} [before] A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list.
         * @param {string} [after] A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, before?: string, after?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Bank Accounts
         * @param {string} recipientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: async (recipientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('listBankAccounts', 'recipientId', recipientId)
            const localVarPath = `/recipients/{recipientId}/bank-accounts`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/bank-accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Transactions
         * @param {string} recipientId 
         * @param {string} [limit] A limit on the number of objects to be returned, between 1 and 50.
         * @param {string} [before] A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list.
         * @param {string} [after] A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions: async (recipientId: string, limit?: string, before?: string, after?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('listTransactions', 'recipientId', recipientId)
            const localVarPath = `/recipients/{recipientId}/transactions`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Withdrawals
         * @param {string} recipientId 
         * @param {string} [limit] A limit on the number of objects to be returned, between 1 and 50.
         * @param {string} [before] A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list.
         * @param {string} [after] A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWithdrawals: async (recipientId: string, limit?: string, before?: string, after?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            assertParamExists('listWithdrawals', 'recipientId', recipientId)
            const localVarPath = `/recipients/{recipientId}/withdrawals`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId !== undefined ? recipientId : `-recipientId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{recipientId}/withdrawals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Recipient
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipientById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRecipientById', 'id', id)
            const localVarPath = `/recipients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recipients/{id}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipientApi - functional programming interface
 * @export
 */
export const RecipientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Bank Account
         * @param {RecipientApiCreateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBankAccount(requestParameters: RecipientApiCreateBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientCreateBankAccountResponse>> {
            const recipientCreateBankAccountRequest: RecipientCreateBankAccountRequest = {
                type: requestParameters.type,
                holderName: requestParameters.holderName,
                holderTaxId: requestParameters.holderTaxId,
                holderType: requestParameters.holderType,
                branchNumber: requestParameters.branchNumber,
                accountNumber: requestParameters.accountNumber,
                bankId: requestParameters.bankId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBankAccount(requestParameters.recipientId, recipientCreateBankAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a Recipient
         * @param {RecipientApiCreateRecipientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecipient(requestParameters: RecipientApiCreateRecipientRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const recipientCreateRecipientRequest: RecipientCreateRecipientRequest = {
                code: requestParameters.code,
                name: requestParameters.name,
                taxId: requestParameters.taxId,
                type: requestParameters.type,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecipient(recipientCreateRecipientRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a Withdrawal
         * @param {RecipientApiCreateWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWithdrawal(requestParameters: RecipientApiCreateWithdrawalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientCreateWithdrawalResponse>> {
            const recipientCreateWithdrawalRequest: RecipientCreateWithdrawalRequest = {
                code: requestParameters.code,
                amount: requestParameters.amount,
                method: requestParameters.method,
                pixKey: requestParameters.pixKey,
                bankAccount: requestParameters.bankAccount,
                bankAccountId: requestParameters.bankAccountId,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWithdrawal(requestParameters.recipientId, recipientCreateWithdrawalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Bank Account
         * @param {RecipientApiDeleteBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankAccount(requestParameters: RecipientApiDeleteBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientDeleteBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBankAccount(requestParameters.recipientId, requestParameters.bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Balance
         * @param {RecipientApiGetBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalance(requestParameters: RecipientApiGetBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalance(requestParameters.recipientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a Bank Account
         * @param {RecipientApiGetBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccount(requestParameters: RecipientApiGetBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientGetBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccount(requestParameters.recipientId, requestParameters.bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a Recipient
         * @param {RecipientApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: RecipientApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a Withdrawal
         * @param {RecipientApiGetWithdrawalByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWithdrawalById(requestParameters: RecipientApiGetWithdrawalByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientGetWithdrawalByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWithdrawalById(requestParameters.recipientId, requestParameters.withdrawalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Recipients
         * @param {RecipientApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: RecipientApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientListAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.before, requestParameters.after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Bank Accounts
         * @param {RecipientApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBankAccounts(requestParameters: RecipientApiListBankAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientListBankAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBankAccounts(requestParameters.recipientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Transactions
         * @param {RecipientApiListTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactions(requestParameters: RecipientApiListTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactions(requestParameters.recipientId, requestParameters.limit, requestParameters.before, requestParameters.after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Withdrawals
         * @param {RecipientApiListWithdrawalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWithdrawals(requestParameters: RecipientApiListWithdrawalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientListWithdrawalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWithdrawals(requestParameters.recipientId, requestParameters.limit, requestParameters.before, requestParameters.after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Recipient
         * @param {RecipientApiUpdateRecipientByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecipientById(requestParameters: RecipientApiUpdateRecipientByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecipientById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipientApi - factory interface
 * @export
 */
export const RecipientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipientApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Bank Account
         * @param {RecipientApiCreateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount(requestParameters: RecipientApiCreateBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientCreateBankAccountResponse> {
            return localVarFp.createBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a Recipient
         * @param {RecipientApiCreateRecipientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipient(requestParameters: RecipientApiCreateRecipientRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createRecipient(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a Withdrawal
         * @param {RecipientApiCreateWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWithdrawal(requestParameters: RecipientApiCreateWithdrawalRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientCreateWithdrawalResponse> {
            return localVarFp.createWithdrawal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Bank Account
         * @param {RecipientApiDeleteBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccount(requestParameters: RecipientApiDeleteBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientDeleteBankAccountResponse> {
            return localVarFp.deleteBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Balance
         * @param {RecipientApiGetBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance(requestParameters: RecipientApiGetBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Bank Account
         * @param {RecipientApiGetBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount(requestParameters: RecipientApiGetBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientGetBankAccountResponse> {
            return localVarFp.getBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Recipient
         * @param {RecipientApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: RecipientApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Withdrawal
         * @param {RecipientApiGetWithdrawalByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithdrawalById(requestParameters: RecipientApiGetWithdrawalByIdRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientGetWithdrawalByIdResponse> {
            return localVarFp.getWithdrawalById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Recipients
         * @param {RecipientApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: RecipientApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RecipientListAllResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Bank Accounts
         * @param {RecipientApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts(requestParameters: RecipientApiListBankAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientListBankAccountsResponse> {
            return localVarFp.listBankAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Transactions
         * @param {RecipientApiListTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactions(requestParameters: RecipientApiListTransactionsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Withdrawals
         * @param {RecipientApiListWithdrawalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWithdrawals(requestParameters: RecipientApiListWithdrawalsRequest, options?: AxiosRequestConfig): AxiosPromise<RecipientListWithdrawalsResponse> {
            return localVarFp.listWithdrawals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Recipient
         * @param {RecipientApiUpdateRecipientByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipientById(requestParameters: RecipientApiUpdateRecipientByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateRecipientById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBankAccount operation in RecipientApi.
 * @export
 * @interface RecipientApiCreateBankAccountRequest
 */
export type RecipientApiCreateBankAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiCreateBankAccount
    */
    readonly recipientId: string
    
} & RecipientCreateBankAccountRequest

/**
 * Request parameters for createRecipient operation in RecipientApi.
 * @export
 * @interface RecipientApiCreateRecipientRequest
 */
export type RecipientApiCreateRecipientRequest = {
    
} & RecipientCreateRecipientRequest

/**
 * Request parameters for createWithdrawal operation in RecipientApi.
 * @export
 * @interface RecipientApiCreateWithdrawalRequest
 */
export type RecipientApiCreateWithdrawalRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiCreateWithdrawal
    */
    readonly recipientId: string
    
} & RecipientCreateWithdrawalRequest

/**
 * Request parameters for deleteBankAccount operation in RecipientApi.
 * @export
 * @interface RecipientApiDeleteBankAccountRequest
 */
export type RecipientApiDeleteBankAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiDeleteBankAccount
    */
    readonly recipientId: string
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiDeleteBankAccount
    */
    readonly bankAccountId: string
    
}

/**
 * Request parameters for getBalance operation in RecipientApi.
 * @export
 * @interface RecipientApiGetBalanceRequest
 */
export type RecipientApiGetBalanceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiGetBalance
    */
    readonly recipientId: string
    
}

/**
 * Request parameters for getBankAccount operation in RecipientApi.
 * @export
 * @interface RecipientApiGetBankAccountRequest
 */
export type RecipientApiGetBankAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiGetBankAccount
    */
    readonly recipientId: string
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiGetBankAccount
    */
    readonly bankAccountId: string
    
}

/**
 * Request parameters for getById operation in RecipientApi.
 * @export
 * @interface RecipientApiGetByIdRequest
 */
export type RecipientApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getWithdrawalById operation in RecipientApi.
 * @export
 * @interface RecipientApiGetWithdrawalByIdRequest
 */
export type RecipientApiGetWithdrawalByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiGetWithdrawalById
    */
    readonly recipientId: string
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiGetWithdrawalById
    */
    readonly withdrawalId: string
    
}

/**
 * Request parameters for listAll operation in RecipientApi.
 * @export
 * @interface RecipientApiListAllRequest
 */
export type RecipientApiListAllRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 50.
    * @type {number}
    * @memberof RecipientApiListAll
    */
    readonly limit?: number
    
    /**
    * A cursor for use in pagination. ```before``` is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with ```obj_bar```, your subsequent call can include ```before=obj_bar``` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof RecipientApiListAll
    */
    readonly before?: string
    
    /**
    * A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    * @type {string}
    * @memberof RecipientApiListAll
    */
    readonly after?: string
    
}

/**
 * Request parameters for listBankAccounts operation in RecipientApi.
 * @export
 * @interface RecipientApiListBankAccountsRequest
 */
export type RecipientApiListBankAccountsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiListBankAccounts
    */
    readonly recipientId: string
    
}

/**
 * Request parameters for listTransactions operation in RecipientApi.
 * @export
 * @interface RecipientApiListTransactionsRequest
 */
export type RecipientApiListTransactionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiListTransactions
    */
    readonly recipientId: string
    
    /**
    * A limit on the number of objects to be returned, between 1 and 50.
    * @type {string}
    * @memberof RecipientApiListTransactions
    */
    readonly limit?: string
    
    /**
    * A cursor for use in pagination. ```before``` is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with ```obj_bar```, your subsequent call can include ```before=obj_bar``` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof RecipientApiListTransactions
    */
    readonly before?: string
    
    /**
    * A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    * @type {string}
    * @memberof RecipientApiListTransactions
    */
    readonly after?: string
    
}

/**
 * Request parameters for listWithdrawals operation in RecipientApi.
 * @export
 * @interface RecipientApiListWithdrawalsRequest
 */
export type RecipientApiListWithdrawalsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiListWithdrawals
    */
    readonly recipientId: string
    
    /**
    * A limit on the number of objects to be returned, between 1 and 50.
    * @type {string}
    * @memberof RecipientApiListWithdrawals
    */
    readonly limit?: string
    
    /**
    * A cursor for use in pagination. ```before``` is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with ```obj_bar```, your subsequent call can include ```before=obj_bar``` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof RecipientApiListWithdrawals
    */
    readonly before?: string
    
    /**
    * A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    * @type {string}
    * @memberof RecipientApiListWithdrawals
    */
    readonly after?: string
    
}

/**
 * Request parameters for updateRecipientById operation in RecipientApi.
 * @export
 * @interface RecipientApiUpdateRecipientByIdRequest
 */
export type RecipientApiUpdateRecipientByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof RecipientApiUpdateRecipientById
    */
    readonly id: string
    
}

/**
 * RecipientApiGenerated - object-oriented interface
 * @export
 * @class RecipientApiGenerated
 * @extends {BaseAPI}
 */
export class RecipientApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a Bank Account
     * @param {RecipientApiCreateBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public createBankAccount(requestParameters: RecipientApiCreateBankAccountRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).createBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a Recipient
     * @param {RecipientApiCreateRecipientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public createRecipient(requestParameters: RecipientApiCreateRecipientRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).createRecipient(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a Withdrawal
     * @param {RecipientApiCreateWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public createWithdrawal(requestParameters: RecipientApiCreateWithdrawalRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).createWithdrawal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Bank Account
     * @param {RecipientApiDeleteBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public deleteBankAccount(requestParameters: RecipientApiDeleteBankAccountRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).deleteBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Balance
     * @param {RecipientApiGetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public getBalance(requestParameters: RecipientApiGetBalanceRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).getBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a Bank Account
     * @param {RecipientApiGetBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public getBankAccount(requestParameters: RecipientApiGetBankAccountRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).getBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a Recipient
     * @param {RecipientApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public getById(requestParameters: RecipientApiGetByIdRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a Withdrawal
     * @param {RecipientApiGetWithdrawalByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public getWithdrawalById(requestParameters: RecipientApiGetWithdrawalByIdRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).getWithdrawalById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Recipients
     * @param {RecipientApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public listAll(requestParameters: RecipientApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Bank Accounts
     * @param {RecipientApiListBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public listBankAccounts(requestParameters: RecipientApiListBankAccountsRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).listBankAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Transactions
     * @param {RecipientApiListTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public listTransactions(requestParameters: RecipientApiListTransactionsRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).listTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Withdrawals
     * @param {RecipientApiListWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public listWithdrawals(requestParameters: RecipientApiListWithdrawalsRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).listWithdrawals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Recipient
     * @param {RecipientApiUpdateRecipientByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApiGenerated
     */
    public updateRecipientById(requestParameters: RecipientApiUpdateRecipientByIdRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).updateRecipientById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
