/* tslint:disable */
/* eslint-disable */
/*
Developer API

At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ItpCreatePaymentInstruction400Response } from '../models';
// @ts-ignore
import { ItpCreatePaymentInstructionRequest } from '../models';
// @ts-ignore
import { ItpCreatePaymentInstructionResponse } from '../models';
// @ts-ignore
import { ItpGetItpResponse } from '../models';
// @ts-ignore
import { ItpListAllResponse } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestMetadataInner } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestPayer } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestSplitInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ITPApi - axios parameter creator
 * @export
 */
export const ITPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an ITP
         * @param {ItpCreatePaymentInstructionRequest} [itpCreatePaymentInstructionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentInstruction: async (itpCreatePaymentInstructionRequest?: ItpCreatePaymentInstructionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/itp-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: itpCreatePaymentInstructionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/itp-payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(itpCreatePaymentInstructionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an ITP
         * @param {string} id Unique identifier for the object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItp: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItp', 'id', id)
            const localVarPath = `/itp-payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/itp-payments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all ITPs
         * @param {number} [limit] A limit on the number of objects to be returned, between 1 and 50.
         * @param {string} [before] A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list.
         * @param {string} [after] A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, before?: string, after?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/itp-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/itp-payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ITPApi - functional programming interface
 * @export
 */
export const ITPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ITPApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create an ITP
         * @param {ITPApiCreatePaymentInstructionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentInstruction(requestParameters: ITPApiCreatePaymentInstructionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItpCreatePaymentInstructionResponse>> {
            const itpCreatePaymentInstructionRequest: ItpCreatePaymentInstructionRequest = {
                code: requestParameters.code,
                amount: requestParameters.amount,
                payer: requestParameters.payer,
                split: requestParameters.split,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentInstruction(itpCreatePaymentInstructionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an ITP
         * @param {ITPApiGetItpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItp(requestParameters: ITPApiGetItpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItpGetItpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItp(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all ITPs
         * @param {ITPApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: ITPApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItpListAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.before, requestParameters.after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ITPApi - factory interface
 * @export
 */
export const ITPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ITPApiFp(configuration)
    return {
        /**
         * 
         * @summary Create an ITP
         * @param {ITPApiCreatePaymentInstructionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentInstruction(requestParameters: ITPApiCreatePaymentInstructionRequest, options?: AxiosRequestConfig): AxiosPromise<ItpCreatePaymentInstructionResponse> {
            return localVarFp.createPaymentInstruction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an ITP
         * @param {ITPApiGetItpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItp(requestParameters: ITPApiGetItpRequest, options?: AxiosRequestConfig): AxiosPromise<ItpGetItpResponse> {
            return localVarFp.getItp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all ITPs
         * @param {ITPApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: ITPApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ItpListAllResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPaymentInstruction operation in ITPApi.
 * @export
 * @interface ITPApiCreatePaymentInstructionRequest
 */
export type ITPApiCreatePaymentInstructionRequest = {
    
} & ItpCreatePaymentInstructionRequest

/**
 * Request parameters for getItp operation in ITPApi.
 * @export
 * @interface ITPApiGetItpRequest
 */
export type ITPApiGetItpRequest = {
    
    /**
    * Unique identifier for the object.
    * @type {string}
    * @memberof ITPApiGetItp
    */
    readonly id: string
    
}

/**
 * Request parameters for listAll operation in ITPApi.
 * @export
 * @interface ITPApiListAllRequest
 */
export type ITPApiListAllRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 50.
    * @type {number}
    * @memberof ITPApiListAll
    */
    readonly limit?: number
    
    /**
    * A cursor for use in pagination. ```before``` is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with ```obj_bar```, your subsequent call can include ```before=obj_bar``` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof ITPApiListAll
    */
    readonly before?: string
    
    /**
    * A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    * @type {string}
    * @memberof ITPApiListAll
    */
    readonly after?: string
    
}

/**
 * ITPApiGenerated - object-oriented interface
 * @export
 * @class ITPApiGenerated
 * @extends {BaseAPI}
 */
export class ITPApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create an ITP
     * @param {ITPApiCreatePaymentInstructionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ITPApiGenerated
     */
    public createPaymentInstruction(requestParameters: ITPApiCreatePaymentInstructionRequest, options?: AxiosRequestConfig) {
        return ITPApiFp(this.configuration).createPaymentInstruction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an ITP
     * @param {ITPApiGetItpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ITPApiGenerated
     */
    public getItp(requestParameters: ITPApiGetItpRequest, options?: AxiosRequestConfig) {
        return ITPApiFp(this.configuration).getItp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all ITPs
     * @param {ITPApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ITPApiGenerated
     */
    public listAll(requestParameters: ITPApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return ITPApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
