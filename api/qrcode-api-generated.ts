/* tslint:disable */
/* eslint-disable */
/*
Developer API

At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { QrCodeGenerateQrCode400Response } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequest } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestMetadataInner } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestPayer } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeRequestSplitInner } from '../models';
// @ts-ignore
import { QrCodeGenerateQrCodeResponse } from '../models';
// @ts-ignore
import { QrCodeGetQrCodeByIdResponse } from '../models';
// @ts-ignore
import { QrCodeListAllResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * QRCodeApi - axios parameter creator
 * @export
 */
export const QRCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Pix QR Code
         * @param {QrCodeGenerateQrCodeRequest} [qrCodeGenerateQrCodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQrCode: async (qrCodeGenerateQrCodeRequest?: QrCodeGenerateQrCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pix-qrcode-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: qrCodeGenerateQrCodeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pix-qrcode-payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(qrCodeGenerateQrCodeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Pix QR Code
         * @param {string} id Unique identifier for the object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCodeById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQrCodeById', 'id', id)
            const localVarPath = `/pix-qrcode-payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pix-qrcode-payments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Pix QR Codes
         * @param {number} [limit] A limit on the number of objects to be returned, between 1 and 50.
         * @param {string} [before] A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list.
         * @param {string} [after] A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, before?: string, after?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pix-qrcode-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pix-qrcode-payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QRCodeApi - functional programming interface
 * @export
 */
export const QRCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QRCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Pix QR Code
         * @param {QRCodeApiGenerateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQrCode(requestParameters: QRCodeApiGenerateQrCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QrCodeGenerateQrCodeResponse>> {
            const qrCodeGenerateQrCodeRequest: QrCodeGenerateQrCodeRequest = {
                code: requestParameters.code,
                amount: requestParameters.amount,
                payer: requestParameters.payer,
                split: requestParameters.split,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQrCode(qrCodeGenerateQrCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a Pix QR Code
         * @param {QRCodeApiGetQrCodeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQrCodeById(requestParameters: QRCodeApiGetQrCodeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QrCodeGetQrCodeByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQrCodeById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Pix QR Codes
         * @param {QRCodeApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: QRCodeApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QrCodeListAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.before, requestParameters.after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QRCodeApi - factory interface
 * @export
 */
export const QRCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QRCodeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Pix QR Code
         * @param {QRCodeApiGenerateQrCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQrCode(requestParameters: QRCodeApiGenerateQrCodeRequest, options?: AxiosRequestConfig): AxiosPromise<QrCodeGenerateQrCodeResponse> {
            return localVarFp.generateQrCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Pix QR Code
         * @param {QRCodeApiGetQrCodeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQrCodeById(requestParameters: QRCodeApiGetQrCodeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<QrCodeGetQrCodeByIdResponse> {
            return localVarFp.getQrCodeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Pix QR Codes
         * @param {QRCodeApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: QRCodeApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QrCodeListAllResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateQrCode operation in QRCodeApi.
 * @export
 * @interface QRCodeApiGenerateQrCodeRequest
 */
export type QRCodeApiGenerateQrCodeRequest = {
    
} & QrCodeGenerateQrCodeRequest

/**
 * Request parameters for getQrCodeById operation in QRCodeApi.
 * @export
 * @interface QRCodeApiGetQrCodeByIdRequest
 */
export type QRCodeApiGetQrCodeByIdRequest = {
    
    /**
    * Unique identifier for the object.
    * @type {string}
    * @memberof QRCodeApiGetQrCodeById
    */
    readonly id: string
    
}

/**
 * Request parameters for listAll operation in QRCodeApi.
 * @export
 * @interface QRCodeApiListAllRequest
 */
export type QRCodeApiListAllRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 50.
    * @type {number}
    * @memberof QRCodeApiListAll
    */
    readonly limit?: number
    
    /**
    * A cursor for use in pagination. ```before``` is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with ```obj_bar```, your subsequent call can include ```before=obj_bar``` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof QRCodeApiListAll
    */
    readonly before?: string
    
    /**
    * A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    * @type {string}
    * @memberof QRCodeApiListAll
    */
    readonly after?: string
    
}

/**
 * QRCodeApiGenerated - object-oriented interface
 * @export
 * @class QRCodeApiGenerated
 * @extends {BaseAPI}
 */
export class QRCodeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a Pix QR Code
     * @param {QRCodeApiGenerateQrCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QRCodeApiGenerated
     */
    public generateQrCode(requestParameters: QRCodeApiGenerateQrCodeRequest, options?: AxiosRequestConfig) {
        return QRCodeApiFp(this.configuration).generateQrCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a Pix QR Code
     * @param {QRCodeApiGetQrCodeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QRCodeApiGenerated
     */
    public getQrCodeById(requestParameters: QRCodeApiGetQrCodeByIdRequest, options?: AxiosRequestConfig) {
        return QRCodeApiFp(this.configuration).getQrCodeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Pix QR Codes
     * @param {QRCodeApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QRCodeApiGenerated
     */
    public listAll(requestParameters: QRCodeApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return QRCodeApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
